# Production environment values for cmf

# Production image configuration
image:
  repository: cmf
  tag: "1.0.0"
  pullPolicy: IfNotPresent

# Production service configuration
service:
  type: ClusterIP
  port: 8088
  annotations: {}

# Production ingress with TLS
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/websocket-services: "{{ include \"cmf.fullname\" . }}"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: cmf.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: cmf-tls
      hosts:
        - cmf.example.com

# Production resources (higher for performance)
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi

# Production autoscaling (aggressive scaling)
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60
      selectPolicy: Max

# Production environment variables
env:
  PORT: "8088"
  KAFKA_TOPIC: "ws-messages"
  KAFKA_CLIENT_ID: "cmf-server-prod"
  KAFKA_GROUP_ID: "cmf-group-prod"
  KAFKA_BROKER: "kafka-prod-service:9092"

# Production replica count
replicaCount: 3


# Production pod annotations
podAnnotations:
  environment: "production"
  version: "1.0.0"
  prometheus.io/scrape: "true"
  prometheus.io/port: "3000"
  prometheus.io/path: "/metrics"

# Production pod labels
podLabels:
  environment: "production"
  tier: "websocket"

# Production security context
securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  allowPrivilegeEscalation: false

# Production health checks (strict)
healthCheck:
  enabled: true
  livenessProbe:
    httpGet:
      path: /health
      port: 8088
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /health
      port: 8088
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Production node selector (optional)
nodeSelector:
  kubernetes.io/os: linux

# Production tolerations (optional)
tolerations: []

# Production affinity (spread across nodes)
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - cmf
        topologyKey: kubernetes.io/hostname
